import React, { useState, useEffect } from 'react';const AppointmentRecorder = () => {    const [isRecording, setIsRecording] = useState(false);    const [transcriptions, setTranscriptions] = useState([]);    const [isComplete, setIsComplete] = useState(false);    const [finalDocumentation, setFinalDocumentation] = useState('');    const [isPlaying, setIsPlaying] = useState(false);    const startRecording = () => {        setIsRecording(true);        setTranscriptions([]);    };    const stopRecording = () => {        setIsRecording(false);        setIsComplete(true);    };    const handleTranscription = (event) => {        const { transcript } = event.results[0][0];        setTranscriptions((prevTranscriptions) => [            ...prevTranscriptions,            { transcription: transcript, timestamp: new Date().toLocaleTimeString() },        ]);    };    const handlePlayback = () => {        setIsPlaying(true);        let index = 0;        const playbackInterval = setInterval(() => {            if (index === transcriptions.length) {                clearInterval(playbackInterval);                setIsPlaying(false);            } else {                const utterance = new SpeechSynthesisUtterance(transcriptions[index].transcription);                window.speechSynthesis.speak(utterance);                index++;            }        }, 1000);    };    useEffect(() => {        let recognition = null;        if (isRecording) {            recognition = new window.webkitSpeechRecognition();            recognition.continuous = true;            recognition.interimResults = true;            recognition.lang = 'en-US';            recognition.onresult = handleTranscription;            recognition.start();        }        return () => {            if (recognition) {                recognition.stop();            }        };    }, [isRecording]);    useEffect(() => {        if (isComplete) {            console.log('Hello')        }    }, [isComplete]);    return (        <div>            <button onClick={startRecording} disabled={isRecording}>                Record            </button>            <button onClick={stopRecording} disabled={!isRecording}>                Stop Recording            </button>            <button onClick={handlePlayback} disabled={isPlaying || transcriptions.length === 0}>                {isPlaying ? 'Playing...' : 'Play'}            </button>            {isPlaying && <p>Loading...</p>}            {isComplete && finalDocumentation && (                <div>                    <h3>Final Documentation:</h3>                    <p>{finalDocumentation}</p>                </div>            )}        </div>    );};export default AppointmentRecorder;